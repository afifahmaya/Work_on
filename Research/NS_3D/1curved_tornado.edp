load "iovtk"
load "msh3"
load "gmsh"

// Variable declaration
real nu = 1.0;
real delta=1.0;
real T=1.0;
real maxmag;
real t=0, dt;
real c=0.25*sqrt(2);
int Nt;
real f1 = 0., f2 = 0., f3 = 0.;

ofstream umag("Max_mag_1curved.txt");
//ofstream umag("Max_mag_1curved0.txt");
//ofstream umag("Max_mag_11curved.txt");
//ofstream umag("Max_mag_11curved0.txt");

func real varphi(real a,real eps,real sigma){
  return pow(a^2+eps,sigma);
}

func real sign(real z){
    if(z>0) return (-1);
    if(z==0) return (0);
    else return (1);
}

//iteration for each mesh devider
for(int n=24; n>=24; n=n-4 )
{
  dt = c*sqrt(1./n); //take dt=c*sqrt(h)
  Nt = T/dt;

  mesh3 Th = gmshload3("build2.msh");
  //mesh3 Th = gmshload3("build.msh");
  plot ( Th );

  fespace Uh(Th,[P1,P1,P1,P1]);
  fespace Vh(Th,P13d);
  macro Grad(u) [dx(u),dy(u),dz(u)]// EOM
  macro div(u1,u2,u3) (dx(u1)+dy(u2)+dz(u3)) //EOM
  
  Uh [u1,u2,u3,p];
  Uh [v1,v2,v3,q];
  Vh u1old, u2old, u3old;
  Vh u1oldd, u2oldd, u3oldd;
  Vh u1star,u2star,u3star;

  problem navierstokesinit ([u1,u2,u3,p],[v1,v2,v3,q]) = 
    int3d(Th) (u1*v1/dt) - int3d(Th) (convect([u1old,u2old,u3old],(-dt),u1old)*v1/dt)
  + int3d(Th) (u2*v2/dt) - int3d(Th) (convect([u1old,u2old,u3old],(-dt),u2old)*v2/dt)
  + int3d(Th) (u3*v3/dt) - int3d(Th) (convect([u1old,u2old,u3old],(-dt),u3old)*v3/dt)
  + int3d(Th,qforder=3)( Grad(u1)'*Grad(v1) +  Grad(u2)'*Grad(v2) +  Grad(u3)'*Grad(v3) //)';
		       - div(u1,u2,u3)*q - div(v1,v2,v3)*p)
  - int3d(Th) ((f1*v1) + (f2*v2) + (f3*v3))
  - int3d(Th) (delta* hTriangle * hTriangle * Grad(p)'*Grad(q))
  + on(1,u1=0,u2=0,u3=0) ;
  
  problem navierstokes ([u1,u2,u3,p],[v1,v2,v3,q]) = 
    int3d(Th) (3*u1*v1/(2*dt)) - int3d(Th) (convect([u1star,u2star,u3star],(-dt),u1old)*4*v1/(2*dt)) 
  + int3d(Th) (convect([u1star,u2star,u3star],(-2*dt),u1oldd)*v1/(2*dt))
  + int3d(Th) (3*u2*v2/(2*dt)) - int3d(Th) (convect([u1star,u2star,u3star],(-dt),u2old)*4*v2/(2*dt)) 
  + int3d(Th) (convect([u1star,u2star,u3star],(-2*dt),u2oldd)*v2/(2*dt))
  + int3d(Th) (3*u3*v3/(2*dt)) - int3d(Th) (convect([u1star,u2star,u3star],(-dt),u3old)*4*v3/(2*dt)) 
  + int3d(Th) (convect([u1star,u2star,u3star],(-2*dt),u3oldd)*v3/(2*dt))
  + int3d(Th,qforder=3)( Grad(u1)'*Grad(v1) +  Grad(u2)'*Grad(v2) +  Grad(u3)'*Grad(v3) //)';
		       - div(u1,u2,u3)*q - div(v1,v2,v3)*p)
  - int3d(Th) ((f1*v1) + (f2*v2) + (f3*v3))
  - int3d(Th) (delta* hTriangle * hTriangle * Grad(p)'*Grad(q))
  + on(1,u1=0,u2=0,u3=0) ;

  //initial at t=0
  Vh r = sqrt(x^2+y^2);
  Vh theta = atan2(x,y);
  Vh uz = varphi(r,1,-1)*varphi(z,1,-1);
  Vh rho = varphi(r,1,-1)*varphi(z,1,1);
  Vh ur = sign(z)*rho*uz;
  Vh utheta = varphi(r,1,-1)*varphi(z,1,-1);
  //Vh utheta = 0.;
  u1old = ur*cos(theta)-utheta*sin(theta);
  u2old = ur*sin(theta)-utheta*cos(theta);
  u3old = uz;

  savevtk("1Curve_init.vtk",Th,[u1old,u2old,u3old],p,dataname="init");
  //savevtk("1Curve0_init.vtk",Th,[u1old,u2old,u3old],p,dataname="init");
  //savevtk("11Curve_init.vtk",Th,[u1old,u2old,u3old],p,dataname="init");
  //savevtk("11Curve0_init.vtk",Th,[u1old,u2old,u3old],p,dataname="init");

  for ( int it = 1; it <= Nt; it++ )
  {
    t=it*dt;
    if (it==1) {navierstokesinit;}
    else {navierstokes;}

    plot ( Th, [u1,u2,u3], nbiso = 60, fill = 0, value = 1, wait = 0);
    savevtk("1Curve"+n+"_"+it+".vtk",Th,[u1,u2,u3],p,dataname="Velocity");
    //savevtk("1Curve0"+n+"_"+it+".vtk",Th,[u1,u2,u3],p,dataname="Velocity");
    //savevtk("11Curve"+n+"_"+it+".vtk",Th,[u1,u2,u3],p,dataname="Velocity");
    //savevtk("11Curve0"+n+"_"+it+".vtk",Th,[u1,u2,u3],p,dataname="Velocity");

    if (abs(u1)>abs(u2) && abs(u1)>abs(u3)) maxmag = abs(u1);
    else if (abs(u2)>abs(u1) && abs(u2)>abs(u3)) maxmag = abs(u2);
    else maxmag = abs(u3);
    umag << t << "\t" << maxmag << "\n" ;
    cout << u1 << "\t" << u2 << "\t" << u3 << "\t" << maxmag << "\n" ;

    u1oldd = u1old; u2oldd = u2old; u3oldd = u3old; 
    u1old = u1; u2old=u2; u3old=u3;
    u1star = 2*u1old-u1oldd; u2star = 2*u2old-u2oldd; u3star = 2*u3old-u3oldd;
  }

  cout << ">>>>>MESH>>>>> " << n << " executed \n" ;
}
//  Terminate.
//
cout << "\n";
cout << "NAVIERSTOKES:\n";
cout << "Normal end of execution.\n";
