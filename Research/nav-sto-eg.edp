load "iovtk"

// Variable declaration
real nu = 1.0;
real Lx = 5.0;
real Ly = 5.0;
real dt = 0.1;
int n = 50;

//  Set the border
border c1 (t=0,1)    {x=t*Lx; y=0;}
border c2 (t=0,1)    {x=Lx; y=t*Ly;}
border c3 (t=1,0)    {x=t*Lx; y=Ly;}
border c4 (t=1,0)    {x=0; y=t*Ly;}

//  Create the mesh
mesh Th = buildmesh ( c1(n)+c2(n)+c3(n)+c4(n) );
plot ( Th, ps = "navierstokes_mesh.ps" );

//  Define the finite element spaces for velocity and pressure
fespace Uh(Th, P2);
fespace Vh(Th, P1);
Uh u, v, uh, vh, uold, vold, f1, f2;
Vh p, ph;

//  Set up the Navierâˆ’Stokes equations
uold = -cos(x)*sin(y) ;
vold = sin(x)*cos(y) ;

problem navierstokes ( [u,v,p], [uh,vh,ph], solver = sparsesolver ) =
   int2d(Th) (u*uh/dt) - int2d(Th) (uold*uh/dt)
 + int2d(Th) (v*vh/dt) - int2d(Th) (vold*vh/dt)
 + int2d(Th) (nu*dx(u)*dx(uh) + nu*dy(u)*dy(uh) )
 + int2d(Th) (nu*dx(v)*dx(vh) + nu*dy(v)*dy(vh) )
 - int2d(Th) (p*dx(uh)+ p*dy(vh))
 + int2d(Th) (dx(u)*ph + dy(v)*ph)
 - int2d(Th) (f1*uh)
 - int2d(Th) (f2*vh)
 + on ( c1, c2, c3, c4, u=0, v=0);

real t;
for ( int it = 1; it <= 20; it++ )
  {
    t=it*dt;
    f1 = -exp(-4*t)*sin(2*x);
    f2 = -exp(-4*t)*sin(2*y);
    navierstokes;
    plot ( Th, [u,v], nbiso = 60, fill = 0, value = 1, wait = 1, ps = "ns_" + it + ".ps" );
    savevtk("ns_plot"+it+".vtk",Th,[u,v],p,dataname="NS");
    uold = u;
    vold = v;

    plot (p, nbiso=60, fill =0, value =1, wait =1, ps = "ns-p_" + it + ".ps" );
  }

//  Terminate.
//
cout << "\n";
cout << "NAVIERSTOKES:\n";
cout << "  Normal end of execution.\n";
